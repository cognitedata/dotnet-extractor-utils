name: Build and Test

on:
  push:
    branches: [ master, integration ]
  pull_request:
    branches: [ master, integration ]

jobs:
  build:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7
    - name: Install dependencies
      run: dotnet restore
      
    - name: Download code signing certificate
      run: echo -n "${{ secrets.CODE_SIGNING_CERTIFICATE }}" | base64 -w 0 --decode > ./cognite_code_signing.pfx
    - name: Extract public key
      run: echo -n "${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}" | sn -p cognite_code_signing.pfx pub_key.snk

    - name: Dotnet build Common
      run: dotnet build Cognite.Common/Cognite.Common.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.Common Cognite.Common
    - name: Dotnet Pack Common
      run: dotnet pack Cognite.Common/Cognite.Common.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build Config
      run: dotnet build Cognite.Config/Cognite.Configuration.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.Config Cognite.Configuration
    - name: Dotnet Pack Config
      run: dotnet pack Cognite.Config/Cognite.Configuration.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build Logging
      run: dotnet build Cognite.Logging/Cognite.Logging.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.Logging Cognite.Logging
    - name: Dotnet Pack Logging
      run: dotnet pack Cognite.Logging/Cognite.Logging.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build Extensions
      run: dotnet build Cognite.Extensions/Cognite.Extensions.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.Extensions Cognite.Extensions
    - name: Dotnet Pack Extensions
      run: dotnet pack Cognite.Extensions/Cognite.Extensions.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build Metrics
      run: dotnet build Cognite.Metrics/Cognite.Metrics.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.Metrics Cognite.Metrics
    - name: Dotnet Pack Metrics
      run: dotnet pack Cognite.Metrics/Cognite.Metrics.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build StateStorage
      run: dotnet build Cognite.StateStorage/Cognite.StateStorage.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.StateStorage Cognite.StateStorage
    - name: Dotnet Pack StateStorage
      run: dotnet pack Cognite.StateStorage/Cognite.StateStorage.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build ExtractorUtils
      run: dotnet build ExtractorUtils/ExtractorUtils.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True -p:BuildWithCert=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./ExtractorUtils ExtractorUtils
    - name: Dotnet Pack Utils
      run: dotnet pack ExtractorUtils/ExtractorUtils.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Dotnet build Testing
      run: dotnet build Cognite.Testing/Cognite.Testing.csproj --configuration Release -p:PackageVersion=1.0.0 -p:SignAssembly=True -p:AssemblyOriginatorKeyFile="$(realpath pub_key.snk)" -p:DelaySign=True -p:BuildWithCert=True
    - name: Strong name sign project
      env:
        CODE_SIGN_PASSWORD: ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }}
      run: ./sign.sh ./Cognite.Testing Cognite.Testing
    - name: Dotnet Pack Testing
      run: dotnet pack Cognite.Testing/Cognite.Testing.csproj --output nuget-packages --configuration Release -p:PackageVersion=1.0.0 --no-build

    - name: Sign nuget packages
      run: dotnet nuget sign nuget-packages/*.nupkg --certificate-path ./cognite_code_signing.pfx --certificate-password ${{ secrets.CODE_SIGNING_CERTIFICATE_PASSWORD }} --timestamper http://timestamp.digicert.com
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-test
        path: nuget-packages/
        retention-days: 1
    - name: Build
      run: dotnet build --configuration Debug --no-restore
    - name: Unit Test
      run: dotnet test --no-restore --verbosity normal /p:Exclude="[*.Test]*" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=TestResults/ --filter ExtractorUtils.Test.Unit. ./ExtractorUtils.Test/
      if: ${{ github.event == 'pull_request' && github.base_ref == 'refs/heads/integration' }}
    #- name: Start Redis
    #  uses: supercharge/redis-github-action@1.5.0
    #  with:
    #    redis-version: 5
    #- name: Test
    #  run: dotnet test --no-restore --verbosity normal /p:Exclude="[*.Test]*" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=TestResults/ ./ExtractorUtils.Test/
    #  if: ${{ github.event != 'pull_request' || github.base_ref == 'refs/heads/master' }}
    #  env:
    #    TEST_PROJECT: "extractor-tests"
    #    TEST_HOST: "https://greenfield.cognitedata.com"
    #    TEST_SCOPE: "https://greenfield.cognitedata.com/.default"
    #    TEST_CLIENT_ID: ${{ secrets.BF_TEST_CLIENT_ID }}
    #    TEST_TENANT: ${{ secrets.BF_TEST_TENANT }}
    #    TEST_SECRET: ${{ secrets.BF_TEST_SECRET }}
    #    BF_TEST_PROJECT: "extractor-bluefield-testing"
    #    BF_TEST_HOST: "https://bluefield.cognitedata.com"
    #    BF_TEST_SCOPE: "https://bluefield.cognitedata.com/.default"
    #    BF_TEST_CLIENT_ID: ${{ secrets.BF_TEST_CLIENT_ID }}
    #    BF_TEST_TENANT: ${{ secrets.BF_TEST_TENANT }}
    #    BF_TEST_SECRET: ${{ secrets.BF_TEST_SECRET }}

    #- name: Upload coverage to Codecov
    #  uses: codecov/codecov-action@v3
    #  with:
    #    token: ${{ secrets.CODECOV_TOKEN }}
